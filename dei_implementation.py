# -*- coding: utf-8 -*-
"""DEI_Implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11tZVlT4Qryq1xFoWgCdR6XaLMSRiCua-

Install Libraries
"""

!pip install pdfminer.six
!pip install fpdf
import spacy
import en_core_web_sm
from spacy.matcher import Matcher
from pdfminer.high_level import extract_text
from fpdf import FPDF
import re
import textwrap
from fpdf import FPDF

"""Use spaCy library"""

# load pre-trained model
nlp = en_core_web_sm.load()

def extract_text_from_pdf(pdf_path):
  return extract_text(pdf_path)

def extract_name(resume_text):
  nlp_text = nlp(resume_text)

  # initialize matcher with a vocab
  matcher = Matcher(nlp.vocab)
  
  # First names, middle names and last names are always Proper Nouns
  # Add pattern of "FirstName LastName"
  pattern1 = [{'POS': 'PROPN'}, {'POS': 'PROPN'}]
  matcher.add('NAME', None, pattern1)
  # Add pattern of "FirstName MiddleName LastName"
  pattern2 = [{'POS': 'PROPN'}, {'POS': 'PROPN'}, {'POS': 'PROPN'}]
  matcher.add('NAME', None, pattern2)
  # Find text that matches these patterns
  matches = matcher(nlp_text)
  
  # Expecting the names to be either the first match or the second match. If
  # the name is "FirstName LastName", it will be the first match. If the name
  # is "FirstName MiddleName LastName", it will be the second match.
  i = 0
  name = ""
  for match_id, start, end in matches:
    span = nlp_text[start:end]
    if i == 0:
      name = span.text
    elif i == 1 and name in span.text:
      # The first match is a substring of the second match, indicating the
      # name is a 3-worlds name.
      name = span.text
      return name
    else:
      return name
    i = i + 1
  return name

def extract_email_addresses(string):
  # Use regular expression to find email
  r = re.compile(r'[\w\.-]+@[\w\.-]+')
  return r.findall(string)[0]

def text_to_pdf(filename, text):
  # Define the format of the PDF
  a4_width_mm = 210
  pt_to_mm = 0.35
  fontsize_mm = 3.5
  margin_bottom_mm = 10
  character_width_mm = 7 * pt_to_mm
  width_text = a4_width_mm / character_width_mm
  pdf = FPDF(orientation='P', unit='mm', format='A4')
  pdf.set_auto_page_break(True, margin=margin_bottom_mm)
  pdf.add_page()
  pdf.set_font(family='Arial', size=10)

  # Making sure the resume's characters are encoded with 'latin-1'
  text = text.encode('latin-1', 'replace').decode('latin-1')
  text = text.replace('?', '*')
  splitted = text.split('\n')

  # Write resume content to the pdf.
  for line in splitted:
    lines = textwrap.wrap(line, width_text)
    if len(lines) == 0:
      pdf.ln()
    for wrap in lines:
      pdf.ln()
      pdf.cell(0, fontsize_mm, wrap, ln=1)

  # Save as PDF
  pdf.output(filename, 'F')


if __name__ == '__main__':
  # Read in the resume and convert it into text
  resume_filename = '/content/Example_Resume.pdf'
  resume_text = extract_text_from_pdf(resume_filename)

  # Extract name and email using NLP library
  name = extract_name(resume_text)
  print('Name: ', name)
  email = extract_email_addresses(resume_text)
  print('Email: ', email)

  # Filter the name and email in the resume
  resume_filtered_text = resume_text.replace(name, 'CANDIDATE')
  resume_filtered_text = resume_filtered_text.replace(email, 'EMAIL_IS_HIDDEN')

  # Save filtered resume as a new PDF
  print('\nSaving filtered resume...\n')
  text_to_pdf('/content/filetered-resume.pdf', resume_filtered_text)
  print('Filtered resume is saved!!')